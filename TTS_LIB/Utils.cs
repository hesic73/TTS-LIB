using NAudio.Wave;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace TTS_LIB
{
    public static class Utils
    {
        public const int speech_synthesis_limit = 5000 - 10;
        public static void WriteToFile(string path, Stream stream)
        {
            using (var fileStream = File.Open(path, FileMode.Create))
            {
                stream.CopyTo(fileStream);
            }
        }


        /// <summary>
        /// split a very long string into smaller strings 
        /// Had better split by periods
        /// </summary>
        /// <param name="long_string"></param>
        /// <returns></returns>
        public static IList<string> SplitLongString(string long_string)
        {
            var length = long_string.Length;
            var ls = new List<string>();

            int start = 0;
            int end = Math.Min(speech_synthesis_limit - 1, length - 1);

            if (length < speech_synthesis_limit)
            {
                return new List<string> { long_string };
            }

            while (true)
            {
                var period_index = long_string.LastIndexOf('.', end);
                if (period_index >= start)
                {
                    end = period_index;
                }
                ls.Add(long_string.Substring(start, end - start + 1));
                start = end + 1;
                end = start + speech_synthesis_limit - 1;
                if (end >= length)
                {
                    ls.Add(long_string.Substring(start));
                    break;
                }
            }


            return ls;
        }

        // based on codes generated by ChatGPT

        private static Mp3WaveFormat GetMp3Format(string filePath)
        {
            // Create a new Mp3FileReader to read the input file
            using (var reader = new Mp3FileReader(filePath))
            {
                // Return the Mp3WaveFormat of the reader
                return reader.Mp3WaveFormat;
            }
        }

        // only support homogenous mp3 files. TO DO: convert formats
        public static Stream ConCatenateMp3Files(IEnumerable<Stream> inputStreams)
        {
            var output = new MemoryStream();
            foreach (var inputStream in inputStreams)
            {
                // Console.WriteLine($"inputStream length:{inputStream.Length}");
                Mp3FileReader reader = new Mp3FileReader(inputStream);
                if ((output.Position == 0) && (reader.Id3v2Tag != null))
                {
                    output.Write(reader.Id3v2Tag.RawData,
                                 0,
                                 reader.Id3v2Tag.RawData.Length);
                }
                Mp3Frame frame;
                while ((frame = reader.ReadNextFrame()) != null)
                {
                    output.Write(frame.RawData, 0, frame.RawData.Length);
                }
            }
            // Console.WriteLine($"outputStream length:{output.Length}");
            output.Seek(0, SeekOrigin.Begin);
            return output;
        }
    }

}

